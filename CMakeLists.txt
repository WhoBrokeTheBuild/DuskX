CMAKE_MINIMUM_REQUIRED(VERSION 3.13)

CMAKE_POLICY(SET CMP0048 NEW)
IF(NOT ${CMAKE_VERSION} VERSION_LESS "3.13")
    CMAKE_POLICY(SET CMP0076 NEW)
ENDIF()

PROJECT(Dusk VERSION 0.0.1)

LIST(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_SOURCE_DIR}/../CMake")

###
### Options
###

OPTION(VERBOSE_LOGGING "Build Dusk with Verbose Logging enabled" OFF)
IF(VERBOSE_LOGGING)
    ADD_DEFINITIONS(-DDUSK_ENABLE_VERBOSE_LOGGING)
ENDIF()

OPTION(BINARY_SHADERS "Build Dusk with Binary Shader support" OFF)
IF(BINARY_SHADERS)
    ADD_DEFINITIONS(-DDUSK_ENABLE_BINARY_SHADERS)
ENDIF()

OPTION(BUILD_DEMOS "Build Dusk Demo Projects" ON)

OPTION(BUILD_TESTS "Build Dusk Tests" ON)

OPTION(BUILD_THIRDPARTY "Build Dusk ThirdParty Dependencies" ON)

###
### Third Party Dependencies
###

IF(BUILD_THIRDPARTY)
    FILE(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/ThirdParty")

    SET(glm_DIR "${CMAKE_BINARY_DIR}/ThirdParty/glm")
    IF(WIN32)
        SET(SDL2_DIR "${CMAKE_BINARY_DIR}/ThirdParty/SDL2/cmake")
    ELSE()
        SET(SDL2_DIR "${CMAKE_BINARY_DIR}/ThirdParty/SDL2/lib/cmake/SDL2")
    ENDIF()
    SET(GTest_DIR "${CMAKE_BINARY_DIR}/ThirdParty/GTest/lib/cmake/GTest")

    EXECUTE_PROCESS(
        COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" "${CMAKE_SOURCE_DIR}/ThirdParty"
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/ThirdParty"
        RESULT_VARIABLE result
    )
    IF(result)
        MESSAGE("${result}")
        MESSAGE(FATAL_ERROR "Failed to configure ThirdParty projects")
    ENDIF()

    SET(BUILD_COMMAND ${CMAKE_COMMAND} --build . )
    IF("${CMAKE_GENERATOR}" STREQUAL "Unix Makefiles")
        SET(BUILD_COMMAND ${CMAKE_MAKE_PROGRAM} -l )
    ENDIF()

    EXECUTE_PROCESS(
        COMMAND ${BUILD_COMMAND}
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/ThirdParty"
        RESULT_VARIABLE result
    )

    IF(result)
        MESSAGE("${result}")
        MESSAGE(FATAL_ERROR "Failed to build ThirdParty projects")
    ENDIF()

    FIND_PACKAGE(glm REQUIRED NO_DEFAULT_PATH)
    FIND_PACKAGE(SDL2 REQUIRED NO_DEFAULT_PATH)
    FIND_PACKAGE(GTest REQUIRED NO_DEFAULT_PATH)
ELSE()
    FIND_PACKAGE(glm REQUIRED)
    FIND_PACKAGE(SDL2 REQUIRED)
    FIND_PACKAGE(GTest REQUIRED)
ENDIF()

IF(BUILD_TESTS)
    ENABLE_TESTING()
ENDIF()

ADD_SUBDIRECTORY(Engine)
ADD_SUBDIRECTORY(Demo)
ADD_SUBDIRECTORY(Tools)
