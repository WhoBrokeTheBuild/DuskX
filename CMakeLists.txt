CMAKE_MINIMUM_REQUIRED(VERSION 3.13)

CMAKE_POLICY(SET CMP0048 NEW)
IF(NOT ${CMAKE_VERSION} VERSION_LESS "3.13")
    CMAKE_POLICY(SET CMP0076 NEW)
ENDIF()

PROJECT(Dusk VERSION 0.0.1)

###
### Options
###

OPTION(VERBOSE_LOGGING "Build Dusk with Verbose Logging enabled" OFF)
IF(VERBOSE_LOGGING)
    ADD_DEFINITIONS(-DDUSK_ENABLE_VERBOSE_LOGGING)
ENDIF()

OPTION(BINARY_SHADERS "Build Dusk with Binary Shader support" OFF)
IF(BINARY_SHADERS)
    ADD_DEFINITIONS(-DDUSK_ENABLE_BINARY_SHADERS)
ENDIF()

SET(OPENGL_VERSION "4.1" CACHE STRING "Minimum supported OpenGL Version")

SET(WINDOW_API "SDL2" CACHE STRING "API to use for managing windows. 'SDL2', 'GLFW', 'DirectX', 'Android'")
SET_PROPERTY(
    CACHE WINDOW_API 
    PROPERTY STRINGS
    "SDL2"
    "GLFW"
    "DirectX"
    "Android"
)

SET(GRAPHICS_API "OpenGL" CACHE STRING "API to use for rendering. 'OpenGL', 'Vulkan', or 'DirectX'")
SET_PROPERTY(
    CACHE GRAPHICS_API 
    PROPERTY STRINGS
    "OpenGL"
    "Vulkan"
    "DirectX"
)

OPTION(BUILD_DEMOS "Build Dusk Demo Projects" ON)

OPTION(BUILD_TESTS "Build Dusk Tests" ON)

OPTION(BUILD_THIRDPARTY "Build Dusk ThirdParty Dependencies" ON)

###
### Configuration
###

LIST(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_SOURCE_DIR}/../CMake")

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF("${WINDOW_API}" STREQUAL "SDL2")
    SET(DUSK_WINDOW_SDL2 TRUE)
    SET(DUSK_WINDOW_LIBRARY DuskSDL2)
ELSEIF("${WINDOW_API}" STREQUAL "GLFW")
    SET(DUSK_WINDOW_GLFW TRUE)
    SET(DUSK_WINDOW_LIBRARY DuskGLFW)
ELSEIF("${WINDOW_API}" STREQUAL "DirectX")
    SET(DUSK_WINDOW_DIRECTX TRUE)
    SET(DUSK_WINDOW_LIBRARY DuskDirectX)
ELSEIF("${WINDOW_API}" STREQUAL "Android")
    SET(DUSK_WINDOW_ANDROID TRUE)
    SET(DUSK_WINDOW_LIBRARY DuskAndroid)
ENDIF()

IF("${GRAPHICS_API}" STREQUAL "OpenGL")
    SET(DUSK_GRAPHICS_OPENGL TRUE)
    SET(DUSK_GRAPHICS_LIBRARY DuskOpenGL)
ELSEIF("${GRAPHICS_API}" STREQUAL "Vulkan")
    SET(DUSK_GRAPHICS_VULKAN TRUE)
    SET(DUSK_GRAPHICS_LIBRARY DuskVulkan)
ELSEIF("${GRAPHICS_API}" STREQUAL "DirectX")
    IF(DUSK_WINDOW_GLFW OR DUSK_WINDOW_ANDROID)
        MESSAGE(FATAL_ERROR "Attempting to use DirectX on unsupported platform ${WINDOW_API}")
    ELSEIF(NOT WIN32)
        MESSAGE(FATAL_ERROR "Attempting to use DirectX on unsupported platform ${CMAKE_SYSTEM_NAME}")
    ENDIF()
    SET(DUSK_GRAPHICS_DIRECTX TRUE)
    SET(DUSK_GRAPHICS_LIBRARY DuskDirectX)
ENDIF()

IF(DUSK_WINDOW_ANDROID)
    MESSAGE(FATAL_ERROR "Android is not currently supported")
ENDIF()

ADD_DEFINITIONS(
    -DDUSK_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}
    -DDUSK_VERSION_MINOR=${PROJECT_VERSION_MINOR}
    -DDUSK_VERSION_PATCH=${PROJECT_VERSION_PATCH}
)

###
### Third Party Dependencies
###

IF(BUILD_THIRDPARTY)
    FILE(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/ThirdParty")

    EXECUTE_PROCESS(
        COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" 
            "${CMAKE_SOURCE_DIR}/ThirdParty" 
            -DNEED_SDL2=${DUSK_WINDOW_SDL2} 
            -DNEED_GLFW=${DUSK_WINDOW_GLFW}
            -DNEED_ANDROID=${DUSK_WINDOW_ANDROID}
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/ThirdParty"
        RESULT_VARIABLE result
    )
    IF(result)
        MESSAGE("${result}")
        MESSAGE(FATAL_ERROR "Failed to configure ThirdParty projects")
    ENDIF()

    SET(BUILD_COMMAND ${CMAKE_COMMAND} --build . )
    IF("${CMAKE_GENERATOR}" STREQUAL "Unix Makefiles")
        SET(BUILD_COMMAND ${CMAKE_MAKE_PROGRAM} -l )
    ENDIF()

    EXECUTE_PROCESS(
        COMMAND ${BUILD_COMMAND}
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/ThirdParty"
        RESULT_VARIABLE result
    )

    IF(result)
        MESSAGE("${result}")
        MESSAGE(FATAL_ERROR "Failed to build ThirdParty projects")
    ENDIF()

    SET(FIND_PACKAGE_ARGS NO_DEFAULT_PATH)

    SET(glm_DIR "${CMAKE_BINARY_DIR}/ThirdParty/glm")
    SET(GTest_DIR "${CMAKE_BINARY_DIR}/ThirdParty/GTest/lib/cmake/GTest")
    
    IF(DUSK_WINDOW_SDL2)
        IF(WIN32)
            SET(SDL2_DIR "${CMAKE_BINARY_DIR}/ThirdParty/SDL2/cmake")
        ELSE()
            SET(SDL2_DIR "${CMAKE_BINARY_DIR}/ThirdParty/SDL2/lib/cmake/SDL2")
        ENDIF()
    ELSEIF(DUSK_WINDOW_GLFW)
        SET(glfw3_DIR "${CMAKE_BINARY_DIR}/ThirdParty/GLFW/lib/cmake/glfw3")
    ENDIF()
ENDIF()

FIND_PACKAGE(glm REQUIRED ${FIND_PACKAGE_ARGS})
FIND_PACKAGE(GTest REQUIRED ${FIND_PACKAGE_ARGS})

IF(DUSK_WINDOW_SDL2)
    FIND_PACKAGE(SDL2 REQUIRED ${FIND_PACKAGE_ARGS})
ELSEIF(DUSK_WINDOW_GLFW)
    FIND_PACKAGE(glfw3 REQUIRED ${FIND_PACKAGE_ARGS})
ENDIF()

IF(DUSK_GRAPHICS_OPENGL)
    FIND_PACKAGE(OpenGL REQUIRED)
ENDIF()

IF(BUILD_TESTS)
    ENABLE_TESTING()
ENDIF()

INCLUDE(CMake/Module.cmake)

ADD_SUBDIRECTORY(Engine)
ADD_SUBDIRECTORY(Demo)
ADD_SUBDIRECTORY(Tools)

SET_PROPERTY(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT "Demo")
